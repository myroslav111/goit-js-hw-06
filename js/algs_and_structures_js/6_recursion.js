function factorial(n) {
  // Базовый случай: факториал 0 или 1 равен 1
  if (n === 0 || n === 1) {
    return 1;
  } else {
    // Рекурсивный случай: n! = n * (n-1)!
    count += 1;
    return n * factorial(n - 1);
  }
}

// Пример использования
// console.log(factorial(3));
// console.log(count);

const fibonachi = n => {
  if (n === 1 || n === 2) {
    return 1;
  }
  return fibonachi(n - 1) + fibonachi(n - 2);
};
// console.log(fibonachi(8));
/**
   *Этот алгоритм работает за log * n тоесть на количество елементов в масиве
   Этот алгоритм является рекурсивным
   */

/**
    * Факториал числа - это произведение всех положительных целых чисел от 1 до этого числа. Обозначается символом "!".
  
  Математически, факториал числа \(n\) записывается как \(n!\) и определяется следующим образом:
  
  \[ n! = n * (n-1) * (n-2) * ... *2 * 1 \]
  
  Например:
  \[ 5! = 5 \cdot 4 \cdot 3 \cdot 2 \cdot 1 = 120 \]
  
  Факториалы широко используются в математике, особенно в комбинаторике (науке о комбинаторных объектах, таких как перестановки, сочетания и т.д.). Они также встречаются в различных областях науки и инженерии, например, в расчетах вероятностей, статистике, и в алгоритмах.
    */

/**
   * Давайте рассмотрим рекурсивную функцию для вычисления факториала числа и разберем ее шаг за шагом.
  
  ```javascript
  function factorial(n) {
      // Базовый случай: факториал 0 или 1 равен 1
      if (n === 0 || n === 1) {
          return 1;
      } else {
          // Рекурсивный случай: n! = n * (n-1)!
          return n * factorial(n - 1);
      }
  }
  
  // Пример использования
  console.log(factorial(5)); // Вывод: 120
  ```
  
  1. **Шаг 1 (n=5):**
     - Вызов `factorial(5)`.
     - Поскольку \(n\) не равно 0 или 1, мы переходим к рекурсивному случаю.
     - Возвращается \(5 \times \text{{factorial}}(4)\).
  
  2. **Шаг 2 (n=4):**
     - Вызов `factorial(4)`.
     - Возвращается \(4 \times \text{{factorial}}(3)\).
  
  3. **Шаг 3 (n=3):**
     - Вызов `factorial(3)`.
     - Возвращается \(3 \times \text{{factorial}}(2)\).
  
  4. **Шаг 4 (n=2):**
     - Вызов `factorial(2)`.
     - Возвращается \(2 \times \text{{factorial}}(1)\).
  
  5. **Шаг 5 (n=1):**
     - Вызов `factorial(1)`.
     - Теперь мы достигли базового случая: \(1! = 1\).
     - Возвращается 1.
  
  Теперь мы начинаем "развертывать" стек вызовов:
  
  - В Шаге 5: \(2 \times \text{{factorial}}(1) = 2 \times 1 = 2\)
  - В Шаге 4: \(3 \times \text{{factorial}}(2) = 3 \times 2 = 6\)
  - В Шаге 3: \(4 \times \text{{factorial}}(3) = 4 \times 6 = 24\)
  - В Шаге 2: \(5 \times \text{{factorial}}(4) = 5 \times 24 = 120\)
  
  Таким образом, результат `factorial(5)` равен 120, что является факториалом числа 5.
   */
